#BlueJ class context
comment0.target=Screens
comment0.text=\r\n\ The\ Screens\ class\ handles\:\ \r\n\ All\ screens\ and\ the\ consequent\ initialisation\r\n\ The\ updating\ of\ screen\ elements\ \r\n\ The\ calculating\ of\ scores\r\n\ The\ saving\ of\ mazes\r\n\ The\ updating\ of\ the\ scores\ list\r\n\ The\ reading\ of\ files\r\n\ \r\n\ Version\:\ 22/05/2021\r\n
comment1.params=
comment1.target=Screens()
comment1.text=Constructor\ for\ the\ default\ initialisation\ of\ the\ Screen\ object\ (Start\ Screen)\ *
comment10.params=
comment10.target=void\ checkCompleted()
comment10.text=Checks\ if\ the\ player\ has\ completed\ the\ maze\ if\ so\:\ remove\ the\ player,\ draw\ the\ optimal\ solution\ path,\ draw\ the\ player's\ path,\ calculate\ and\ display\ the\ score,\ and\ if\ the\ maze\ is\ not\ a\ saved\ maze\ meaning\:\ update\ the\ scores\ list,\ add\ a\ save\ button\ to\ give\ the\ option\ to\ save\ the\ maze\ if\ the\ maze\ was\ not\ autosaved\ *
comment11.params=actsCount
comment11.target=java.lang.String\ getTimerText(int)
comment11.text=Return\ a\ string\ to\ represent\ the\ time\ elapsed\ in\ minutes\ and\ seconds\ when\ given\ a\ number\ of\ act\ cycles\ that\ have\ passed\ *
comment12.params=playerTimer\ playerPathSize\ solverPathSize
comment12.target=void\ calculateScore(int,\ int,\ int)
comment12.text=Calculates\ the\ player's\ accuracy\ score,\ and\ consequently\ their\ path\ accuracy\ and\ time\ accuracy\ *
comment13.params=autosaveFileName
comment13.target=void\ saveToFile(java.lang.String)
comment13.text=Save\ a\ maze\ and\ the\ corresponding\ player\ data\ to\ a\ JSON\ file\ *
comment14.params=fileName
comment14.target=boolean\ isExistingFile(java.lang.String)
comment14.text=Checks\ if\ a\ file\ of\ a\ given\ name\ already\ exists\ *
comment15.params=fileName\ jObject
comment15.target=java.io.FileWriter\ writeToJson(java.lang.String,\ org.json.simple.JSONObject)
comment15.text=Write\ a\ given\ JSONObject\ to\ a\ file\ with\ a\ given\ filename\ *
comment16.params=firstCall\ fileName
comment16.target=void\ updateScoresList(boolean,\ java.lang.String)
comment16.text=Updates\ the\ relevant\ scores\ list\ in\ the\ scoresLists\ file\ *
comment17.params=fileName
comment17.target=java.lang.Object\ readJson(java.lang.String)
comment17.text=Read\ a\ given\ JSON\ file\ *
comment18.params=fileObject
comment18.target=void\ updateCumulativeScores(org.json.simple.JSONObject)
comment18.text=Updates\ the\ cumulative\ scores\ for\ the\ given\ difficulty\ -\ i.e.\ the\ average\ accuracy\ score\ and\ the\ games\ completed\ count\ *
comment19.params=
comment19.target=java.lang.String\ selectAutosaveFileName()
comment19.text=Returns\ an\ available\u0000\ file\ name\ for\ an\ autosave\ file\ *
comment2.params=screenType
comment2.target=Screens(java.lang.String)
comment2.text=Constructor\ for\ the\ initialisation\ of\ all\ other\ Screens\ objects,\ except\ Screens\ for\ viewing\ or\ playing\ saved\ mazes.\ *
comment20.params=saveFileName
comment20.target=org.json.simple.JSONObject\ getScoresListObject(java.lang.String)
comment20.text=Creates\ and\ returns\ a\ scoresListObject\ for\ the\ scores\ being\ appended\ *
comment21.params=scoresList\ saveFileName
comment21.target=org.json.simple.JSONObject\ getUpdatedScoresList(org.json.simple.JSONObject,\ java.lang.String)
comment21.text=Returns\ an\ updated\ and\ sorted\ scores\ list\ *
comment22.params=mazeDifficulty
comment22.target=void\ displayScores(java.lang.String)
comment22.text=Displays\ the\ scores\ on\ a\ page\ for\ a\ given\ difficulty\ *
comment23.params=
comment23.target=void\ importFile()
comment23.text=Reads\ and\ stores\ data\ from\ a\ given\ file\ *
comment24.params=
comment24.target=java.lang.String\ getFileName()
comment24.text=Get\ the\ name\ of\ a\ desired\ file\ from\ the\ user\ and\ display\ their\ input\ *
comment25.params=string\ length
comment25.target=java.lang.String\ cutStringToLength(java.lang.String,\ int)
comment25.text=Return\ a\ given\ string\ cut\ down\ to\ a\ given\ length\ with\ "..."\ added\ on\ the\ end\ if\ characters\ have\ been\ cut\ off\ from\ the\ end\ *
comment3.params=play\ mazeLayout\ playerPathTakenRows\ playerPathTakenCols\ accuracyScore\ pathAccuracy\ timeAccuracy\ playerTimer
comment3.target=Screens(boolean,\ int[][],\ java.util.List,\ java.util.List,\ double,\ double,\ double,\ int)
comment3.text=Constructor\ for\ the\ initialisation\ of\ a\ Screens\ object\ for\ viewing\ or\ playing\ saved\ mazes.\ *
comment4.params=
comment4.target=void\ act()
comment4.text=This\ method\ is\ called\ for\ every\ act\ cycle\ when\ the\ program\ is\ running\ which\ occurs\ when\ the\ run\ or\ act\ button\ is\ pressed\ in\ the\ environment\ *
comment5.params=
comment5.target=void\ updateButtons()
comment5.text=Respond\ to\ and\ update\ button\ triggers\ and\ adds/removes\ buttons\ in\ the\ world\ where\ necessary\ *
comment6.params=
comment6.target=void\ updateScreen()
comment6.text=If\ the\ player\ has\ not\ already\ completed\ the\ maze\ it\ updates\ the\ time\ elapsed\ text\ on\ the\ screen\ and\ calls\ the\ checkCompleted\ method\ \ *
comment7.params=mazeDifficulty
comment7.target=void\ initialiseSession(java.lang.String)
comment7.text=Generate\ the\ maze,\ draw\ the\ map\ to\ the\ screen\ and\ add\ the\ player\ to\ the\ world\ *
comment8.params=rowsCount\ colsCount\ cellSize
comment8.target=void\ drawMap(int,\ int,\ int)
comment8.text=Draws\ the\ map\ specified\ in\ the\ mazeLayout\ array\ to\ the\ screen\ *
comment9.params=type\ pathTakenRows\ pathTakenCols\ rowsCount\ colsCount\ cellSize
comment9.target=void\ drawPath(java.lang.String,\ java.util.List,\ java.util.List,\ int,\ int,\ int)
comment9.text=Draws\ the\ path\ specified(either\ a\ \ player\ path\ or\ a\ maze\ solver\ path)\ to\ the\ screen\ *
numComments=26
